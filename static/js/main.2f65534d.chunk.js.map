{"version":3,"sources":["Header.js","SearchBar.js","Book.js","BookList.js","Books.js","App.js","serviceWorker.js","index.js"],"names":["Header","style","SearchBar","props","padding","backgroundColor","verticalAlign","className","onSubmit","color","outline","onChange","onsearchChange","type","borderWidth","borderColor","textAlign","Book","volumeInfo","info","title","authors","publisher","infoLink","thumbnail","hasOwnProperty","imageLinks","display","height","width","overflow","whiteSpace","position","marginRight","marginTop","borderRadius","float","boxShadow","alt","src","paddingTop","paddingLeft","href","BookList","books","map","book","key","id","Books","e","setState","search","target","value","preventDefault","fetch","state","then","res","json","result","items","error","console","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"yOAUeA,EARA,WACb,OACE,gCACE,wBAAIC,MAAO,CAAC,cAAgB,QAA5B,iB,OC2BSC,EA9BG,SAACC,GAoBjB,OACE,yBAAKF,MApBa,CAClBG,QAAS,MACTC,gBAAiB,UACjBC,cAAe,UAiBUC,UAAU,aACjC,0BAAMC,SAAUL,EAAMK,UACpB,2BAAOP,MAhBM,CACjBQ,MAAO,UACPC,QAAS,QAcqBC,SAAUR,EAAMS,eAAgBC,KAAK,SAC/D,4BAAQZ,MAbM,CAClBQ,MAAO,UACPK,YAAa,QACbC,YAAa,UACbC,UAAW,SACXN,QAAS,OACTL,gBAAiB,WAOcQ,KAAK,UAAS,uBAAGN,UAAU,2BCyB/CU,EAjDF,SAACd,GAAW,IACfe,EAAef,EAAMgB,KAArBD,WACAE,EAAwCF,EAAxCE,MAAOC,EAAiCH,EAAjCG,QAASC,EAAwBJ,EAAxBI,UAAWC,EAAaL,EAAbK,SAC7BC,IAAYN,EAAWO,eAAe,eAAgBP,EAAWQ,WAAWF,UAiClF,OACE,yBAAKvB,MAhCW,CAChBI,gBAAiB,UACjBsB,QAAS,eACTC,OAAQ,QACRC,MAAO,QACPC,SAAU,SACVC,WAAY,SACZC,SAAU,WACVC,YAAa,OACbC,UAAW,OACXC,aAAc,QAsBS5B,UAAU,QAC9BiB,GAAa,yBAAKvB,MApBN,CACf+B,SAAU,WACVI,MAAO,OACPhC,QAAS,OACTE,cAAe,SACfsB,OAAQ,QACRC,MAAO,QACPQ,UAAW,uBAa2BC,IAAI,GAAGC,IAAKf,IAChD,yBAAKvB,MAXS,CAChBuC,WAAY,OACZC,YAAa,OACbR,YAAa,MACbjB,UAAW,OACXc,SAAU,UAMevB,UAAU,QAC/B,4BAAKa,GACL,mCAASC,GACT,6CAAmBC,GACnB,uBAAGoB,KAAMnB,GAAT,gBC9BOoB,EAZE,SAACxC,GAChB,OACE,yBAAKF,MAAO,CAAC,gBAAkB,WAAWM,UAAU,YAEhDJ,EAAMyC,MAAMC,KAAI,SAACC,GACf,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAKE,GAAI7B,KAAM2B,SCoC5BG,G,kBAtCb,WAAY9C,GAAQ,IAAD,8BACjB,4CAAMA,KAORS,eAAiB,SAACsC,GAEhB,EAAKC,SAAS,CAACC,OAAQF,EAAEG,OAAOC,SAVf,EAanB9C,SAAW,SAAC0C,GACVA,EAAEK,iBACFC,MAAM,iDAAmD,EAAKC,MAAML,QACjEM,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GACC,EAAKV,SAAS,CAACP,MAAM,YAAKiB,EAAOC,YAEnC,SAACC,GACCC,QAAQD,MAAMA,OApBpB,EAAKN,MAAQ,CACXb,MAAO,GACPQ,OAAQ,IAJO,E,sEA6BjB,OACE,yBAAK7C,UAAU,SACb,kBAAC,EAAD,CAAWK,eAAgBqD,KAAKrD,eAAgBJ,SAAUyD,KAAKzD,WAC/D,kBAAC,EAAD,CAAUoC,MAAOqB,KAAKR,MAAMb,a,GAjChBsB,cCULC,E,iLATX,OACE,yBAAK5D,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GALU2D,aCQEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAnB,GACLC,QAAQD,MAAMA,EAAMoB,a","file":"static/js/main.2f65534d.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => {\n  return(\n    <header>\n      <h1 style={{\"letterSpacing\":\"3px\"}}>Book Finder</h1>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from 'react';\n\nconst SearchBar = (props) => {\n  const searchStyle = {\n    padding: \"1em\",\n    backgroundColor: \"#8ad0d6\",\n    verticalAlign: \"middle\",\n  };\n\n  const inputStyle = {\n    color: \"#000000\",\n    outline: \"none\",\n  };\n  const buttonStyle = {\n    color: \"#000000\",\n    borderWidth: \"1.5px\",\n    borderColor: \"#000000\",\n    textAlign: \"center\",\n    outline: \"none\",\n    backgroundColor: \"#8ad0d6\"\n  };\n\n  return(\n    <div style={searchStyle} className=\"SearchBar\">\n      <form onSubmit={props.onSubmit}>\n        <input style={inputStyle} onChange={props.onsearchChange} type=\"text\"/>\n        <button style={buttonStyle}type=\"submit\"><i className=\"fas fa-arrow-right\"></i></button>\n      </form>\n    </div>\n  );\n}\n\nexport default SearchBar;\n","import React from 'react';\n\nconst Book = (props) => {\n  const { volumeInfo } = props.info;\n  const { title, authors, publisher, infoLink } = volumeInfo;\n  const thumbnail = volumeInfo.hasOwnProperty('imageLinks') ? volumeInfo.imageLinks.thumbnail : false;\n  \n  const bookStyle = {\n    backgroundColor: \"#8ad0d6\",\n    display: \"inline-block\",\n    height: \"235px\",\n    width: \"350px\",\n    overflow: \"hidden\",\n    whiteSpace: \"normal\",\n    position: \"relative\",\n    marginRight: \"15px\",\n    marginTop: \"15px\",\n    borderRadius: \"15px\",\n  };\n\n  const imgStyle = {\n    position: \"relative\",\n    float: \"left\",\n    padding: \"15px\",\n    verticalAlign: \"middle\",\n    height: \"230px\",\n    width: \"150px\",\n    boxShadow: \"0px -10px 30px #ccc\",\n  };\n\n  const infoStyle = {\n    paddingTop: \"15px\",\n    paddingLeft: \"20px\",\n    marginRight: \"5px\",\n    textAlign: \"left\",\n    overflow: \"hidden\",\n  }\n\n  return(\n    <div style={bookStyle} className=\"Book\">\n      {thumbnail && <img style={imgStyle} alt=\"\" src={thumbnail}></img>}\n      <div style={infoStyle} className=\"info\">\n        <h5>{title}</h5>\n        <h6>By: {authors}</h6>\n        <h6>Published By: {publisher}</h6>\n        <a href={infoLink}>More Info</a>\n      </div>\n    </div>\n  );\n}\n\nexport default Book;\n","import React from 'react';\nimport Book from './Book';\n\nconst BookList = (props) => {\n  return(\n    <div style={{\"backgroundColor\":\"#dfdfe6\"}}className=\"BookList\">\n      {\n        props.books.map((book) => {\n          return <Book key={book.id} info={book} />\n        })\n      }\n    </div>\n  );\n}\n\nexport default BookList;\n","import React, { Component } from 'react';\nimport SearchBar from './SearchBar';\nimport BookList from './BookList';\nimport './App.css';\n\nclass Books extends Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n      books: [],\n      search: ''\n    }\n  }\n\n  onsearchChange = (e) => {\n    //handle search validation\n    this.setState({search: e.target.value});\n  }\n\n  onSubmit = (e) => {\n    e.preventDefault();\n    fetch(\"https://www.googleapis.com/books/v1/volumes?q=\" + this.state.search)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({books: [...result.items]})\n        },\n        (error) => {\n          console.error(error);\n        }\n      )\n  }\n\n\n  render() {\n    return (\n      <div className=\"Books\">          \n        <SearchBar onsearchChange={this.onsearchChange} onSubmit={this.onSubmit} />\n        <BookList books={this.state.books} />\n      </div>\n    )\n  }\n}\n\nexport default Books;\n","import React, { Component } from 'react';\nimport Header from './Header';\nimport Books from './Books';\n\nclass App extends Component{\n  render() {\n    return (\n      <div className=\"App\">          \n        <Header/>\n        <Books/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}